//@version=5
strategy("台指期多空策略", overlay=true, margin_long=100, margin_short=100)

// =====================
// 參數設定
// =====================
bb_window = input.int(20, "布林帶期間", minval=5, maxval=50)
bb_std = input.float(2.5, "布林帶標準差", minval=1.0, maxval=4.0, step=0.1)
rsi_period = input.int(14, "RSI期間", minval=5, maxval=30)
rsi_oversold = input.int(30, "RSI超賣", minval=10, maxval=50)
rsi_overbought = input.int(70, "RSI超買", minval=50, maxval=90)
stop_loss_pct = input.float(0.3, "止損百分比(%)", minval=0.1, maxval=2.0, step=0.05)
require_reversal_kbar = input.bool(true, "K棒型態必須")
max_hold_bars = input.int(5, "最大持有K棒數", minval=1, maxval=20)

// =====================
// 指標計算
// =====================
// 布林帶
bb_mid = ta.sma(close, bb_window)
bb_std_val = ta.stdev(close, bb_window)
bb_upper = bb_mid + bb_std * bb_std_val
bb_lower = bb_mid - bb_std * bb_std_val

// RSI
rsi = ta.rsi(close, rsi_period)

// K線型態
// 多頭吞噬
bull_engulfing = close[1] < open[1] and close > open and open < close[1] and close > open[1]
// 空頭吞噬
bear_engulfing = close[1] > open[1] and close < open and open > close[1] and close < open[1]
// 錘頭
hammer = (high - low) > 3 * math.abs(close - open) and (close - low) / (high - low) > 0.6 and (open - low) / (high - low) > 0.6
// 墓碑線
gravestone = (high - low) > 3 * math.abs(close - open) and (high - close) / (high - low) > 0.6 and (high - open) / (high - low) > 0.6

// =====================
// 進場條件
// =====================
// 多單進場條件
long_bb_condition = close <= bb_lower
long_rsi_condition = rsi < rsi_oversold
long_kbar_condition = hammer or bull_engulfing

long_entry = require_reversal_kbar ? (long_bb_condition and long_rsi_condition and long_kbar_condition) : (long_bb_condition and long_rsi_condition)

// 空單進場條件
short_bb_condition = close >= bb_upper
short_rsi_condition = rsi > rsi_overbought
short_kbar_condition = gravestone or bear_engulfing

short_entry = require_reversal_kbar ? (short_bb_condition and short_rsi_condition and short_kbar_condition) : (short_bb_condition and short_rsi_condition)

// =====================
// 出場條件
// =====================
// 多單出場：達到布林帶中軌或持有超過最大K棒數
long_exit = close >= bb_mid
// 空單出場：達到布林帶中軌或持有超過最大K棒數
short_exit = close <= bb_mid

// =====================
// 策略執行
// =====================
// 多單進場
if long_entry and strategy.position_size == 0
    strategy.entry("Long", strategy.long)
    strategy.exit("Long Exit", "Long", limit=bb_mid, stop=low * (1 - stop_loss_pct / 100))

// 空單進場
if short_entry and strategy.position_size == 0
    strategy.entry("Short", strategy.short)
    strategy.exit("Short Exit", "Short", limit=bb_mid, stop=high * (1 + stop_loss_pct / 100))

// 時間停損（持有超過最大K棒數）
var int entry_bar = na
if strategy.position_size != 0 and na(entry_bar)
    entry_bar = bar_index

if not na(entry_bar) and (bar_index - entry_bar) >= max_hold_bars
    strategy.close_all("時間停損")
    entry_bar := na

// =====================
// 繪製指標
// =====================
// 布林帶
plot(bb_upper, "布林帶上軌", color=color.red, linewidth=1)
plot(bb_mid, "布林帶中軌", color=color.blue, linewidth=1)
plot(bb_lower, "布林帶下軌", color=color.green, linewidth=1)

// 進場點標記
plotshape(long_entry, "多單進場", shape.triangleup, location.belowbar, color.green, size=size.small)
plotshape(short_entry, "空單進場", shape.triangledown, location.abovebar, color.red, size=size.small)

// 出場點標記
plotshape(long_exit and strategy.position_size > 0, "多單出場", shape.circle, location.abovebar, color.orange, size=size.tiny)
plotshape(short_exit and strategy.position_size < 0, "空單出場", shape.circle, location.belowbar, color.orange, size=size.tiny)

// =====================
// 顯示資訊
// =====================
var table info_table = table.new(position.top_right, 2, 4, bgcolor=color.white, border_width=1)
if barstate.islast
    table.cell(info_table, 0, 0, "RSI", text_color=color.black)
    table.cell(info_table, 1, 0, str.tostring(rsi, "#.##"), text_color=color.black)
    table.cell(info_table, 0, 1, "BB位置", text_color=color.black)
    bb_position = (close - bb_lower) / (bb_upper - bb_lower) * 100
    table.cell(info_table, 1, 1, str.tostring(bb_position, "#.##") + "%", text_color=color.black)
    table.cell(info_table, 0, 2, "持倉", text_color=color.black)
    position_text = strategy.position_size > 0 ? "多單" : strategy.position_size < 0 ? "空單" : "無"
    table.cell(info_table, 1, 2, position_text, text_color=color.black)
    table.cell(info_table, 0, 3, "淨利", text_color=color.black)
    table.cell(info_table, 1, 3, str.tostring(strategy.netprofit, "#.##"), text_color=color.black) 